//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MessagingClient1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", CallbackContract=typeof(MessagingClient1.ServiceReference1.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogIn", ReplyAction="http://tempuri.org/IService1/LogInResponse")]
        System.Guid LogIn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogIn", ReplyAction="http://tempuri.org/IService1/LogInResponse")]
        System.Threading.Tasks.Task<System.Guid> LogInAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/LogOut")]
        void LogOut(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/LogOut")]
        System.Threading.Tasks.Task LogOutAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMessage", ReplyAction="http://tempuri.org/IService1/SendMessageResponse")]
        void SendMessage(System.Guid clientId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMessage", ReplyAction="http://tempuri.org/IService1/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(System.Guid clientId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHistory", ReplyAction="http://tempuri.org/IService1/GetHistoryResponse")]
        string GetHistory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetHistory", ReplyAction="http://tempuri.org/IService1/GetHistoryResponse")]
        System.Threading.Tasks.Task<string> GetHistoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/KeepConnection", ReplyAction="http://tempuri.org/IService1/KeepConnectionResponse")]
        void KeepConnection(string client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/KeepConnection", ReplyAction="http://tempuri.org/IService1/KeepConnectionResponse")]
        System.Threading.Tasks.Task KeepConnectionAsync(string client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/HandleMessage")]
        void HandleMessage(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MessagingClient1.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<MessagingClient1.ServiceReference1.IService1>, MessagingClient1.ServiceReference1.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Guid LogIn() {
            return base.Channel.LogIn();
        }
        
        public System.Threading.Tasks.Task<System.Guid> LogInAsync() {
            return base.Channel.LogInAsync();
        }
        
        public void LogOut(System.Guid clientId) {
            base.Channel.LogOut(clientId);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(System.Guid clientId) {
            return base.Channel.LogOutAsync(clientId);
        }
        
        public void SendMessage(System.Guid clientId, string message) {
            base.Channel.SendMessage(clientId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(System.Guid clientId, string message) {
            return base.Channel.SendMessageAsync(clientId, message);
        }
        
        public string GetHistory() {
            return base.Channel.GetHistory();
        }
        
        public System.Threading.Tasks.Task<string> GetHistoryAsync() {
            return base.Channel.GetHistoryAsync();
        }
        
        public void KeepConnection(string client) {
            base.Channel.KeepConnection(client);
        }
        
        public System.Threading.Tasks.Task KeepConnectionAsync(string client) {
            return base.Channel.KeepConnectionAsync(client);
        }
    }
}
